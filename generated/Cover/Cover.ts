// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CoverBought extends ethereum.Event {
  get params(): CoverBought__Params {
    return new CoverBought__Params(this);
  }
}

export class CoverBought__Params {
  _event: CoverBought;

  constructor(event: CoverBought) {
    this._event = event;
  }

  get coverId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get productId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get segmentId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get ipfsMetadata(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class CoverEdited extends ethereum.Event {
  get params(): CoverEdited__Params {
    return new CoverEdited__Params(this);
  }
}

export class CoverEdited__Params {
  _event: CoverEdited;

  constructor(event: CoverEdited) {
    this._event = event;
  }

  get coverId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get productId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get segmentId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CoverExpired extends ethereum.Event {
  get params(): CoverExpired__Params {
    return new CoverExpired__Params(this);
  }
}

export class CoverExpired__Params {
  _event: CoverExpired;

  constructor(event: CoverExpired) {
    this._event = event;
  }

  get coverId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get segmentId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProductTypeUpserted extends ethereum.Event {
  get params(): ProductTypeUpserted__Params {
    return new ProductTypeUpserted__Params(this);
  }
}

export class ProductTypeUpserted__Params {
  _event: ProductTypeUpserted;

  constructor(event: ProductTypeUpserted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ipfsMetadata(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ProductUpserted extends ethereum.Event {
  get params(): ProductUpserted__Params {
    return new ProductUpserted__Params(this);
  }
}

export class ProductUpserted__Params {
  _event: ProductUpserted;

  constructor(event: ProductUpserted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ipfsMetadata(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class StakingPoolCreated extends ethereum.Event {
  get params(): StakingPoolCreated__Params {
    return new StakingPoolCreated__Params(this);
  }
}

export class StakingPoolCreated__Params {
  _event: StakingPoolCreated;

  constructor(event: StakingPoolCreated) {
    this._event = event;
  }

  get stakingPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get stakingPoolImplementation(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Cover__coverDataResultValue0Struct extends ethereum.Tuple {
  get productId(): i32 {
    return this[0].toI32();
  }

  get payoutAsset(): i32 {
    return this[1].toI32();
  }

  get amountPaidOut(): BigInt {
    return this[2].toBigInt();
  }
}

export class Cover__coverSegmentAllocationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Cover__coverSegmentsResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get start(): BigInt {
    return this[1].toBigInt();
  }

  get period(): BigInt {
    return this[2].toBigInt();
  }

  get priceRatio(): i32 {
    return this[3].toI32();
  }

  get expired(): boolean {
    return this[4].toBoolean();
  }

  get globalRewardsRatio(): i32 {
    return this[5].toI32();
  }
}

export class Cover__createStakingPoolInputProductInitializationParamsStruct extends ethereum.Tuple {
  get productId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): i32 {
    return this[1].toI32();
  }

  get initialPrice(): BigInt {
    return this[2].toBigInt();
  }

  get targetPrice(): BigInt {
    return this[3].toBigInt();
  }
}

export class Cover__productTypesResultValue0Struct extends ethereum.Tuple {
  get claimMethod(): i32 {
    return this[0].toI32();
  }

  get gracePeriodInDays(): i32 {
    return this[1].toI32();
  }
}

export class Cover__productsResultValue0Struct extends ethereum.Tuple {
  get productType(): i32 {
    return this[0].toI32();
  }

  get productAddress(): Address {
    return this[1].toAddress();
  }

  get coverAssets(): BigInt {
    return this[2].toBigInt();
  }

  get initialPriceRatio(): i32 {
    return this[3].toI32();
  }

  get capacityReductionRatio(): i32 {
    return this[4].toI32();
  }
}

export class Cover extends ethereum.SmartContract {
  static bind(address: Address): Cover {
    return new Cover("Cover", address);
  }

  MAX_COVER_PERIOD(): BigInt {
    let result = super.call(
      "MAX_COVER_PERIOD",
      "MAX_COVER_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_COVER_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_COVER_PERIOD",
      "MAX_COVER_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeCoverAmountCommitted(): boolean {
    let result = super.call(
      "activeCoverAmountCommitted",
      "activeCoverAmountCommitted():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_activeCoverAmountCommitted(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "activeCoverAmountCommitted",
      "activeCoverAmountCommitted():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  coverAmountTrackingEnabled(): boolean {
    let result = super.call(
      "coverAmountTrackingEnabled",
      "coverAmountTrackingEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_coverAmountTrackingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "coverAmountTrackingEnabled",
      "coverAmountTrackingEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  coverAssetsFallback(): BigInt {
    let result = super.call(
      "coverAssetsFallback",
      "coverAssetsFallback():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_coverAssetsFallback(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "coverAssetsFallback",
      "coverAssetsFallback():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coverData(coverId: BigInt): Cover__coverDataResultValue0Struct {
    let result = super.call(
      "coverData",
      "coverData(uint256):((uint24,uint8,uint96))",
      [ethereum.Value.fromUnsignedBigInt(coverId)]
    );

    return result[0].toTuple() as Cover__coverDataResultValue0Struct;
  }

  try_coverData(
    coverId: BigInt
  ): ethereum.CallResult<Cover__coverDataResultValue0Struct> {
    let result = super.tryCall(
      "coverData",
      "coverData(uint256):((uint24,uint8,uint96))",
      [ethereum.Value.fromUnsignedBigInt(coverId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Cover__coverDataResultValue0Struct
    );
  }

  coverNFT(): Address {
    let result = super.call("coverNFT", "coverNFT():(address)", []);

    return result[0].toAddress();
  }

  try_coverNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("coverNFT", "coverNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coverSegmentAllocations(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt
  ): Cover__coverSegmentAllocationsResult {
    let result = super.call(
      "coverSegmentAllocations",
      "coverSegmentAllocations(uint256,uint256,uint256):(uint40,uint96,uint96)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new Cover__coverSegmentAllocationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_coverSegmentAllocations(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<Cover__coverSegmentAllocationsResult> {
    let result = super.tryCall(
      "coverSegmentAllocations",
      "coverSegmentAllocations(uint256,uint256,uint256):(uint40,uint96,uint96)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cover__coverSegmentAllocationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  coverSegments(
    coverId: BigInt,
    segmentId: BigInt
  ): Cover__coverSegmentsResultValue0Struct {
    let result = super.call(
      "coverSegments",
      "coverSegments(uint256,uint256):((uint96,uint32,uint32,uint16,bool,uint24))",
      [
        ethereum.Value.fromUnsignedBigInt(coverId),
        ethereum.Value.fromUnsignedBigInt(segmentId)
      ]
    );

    return result[0].toTuple() as Cover__coverSegmentsResultValue0Struct;
  }

  try_coverSegments(
    coverId: BigInt,
    segmentId: BigInt
  ): ethereum.CallResult<Cover__coverSegmentsResultValue0Struct> {
    let result = super.tryCall(
      "coverSegments",
      "coverSegments(uint256,uint256):((uint96,uint32,uint32,uint16,bool,uint24))",
      [
        ethereum.Value.fromUnsignedBigInt(coverId),
        ethereum.Value.fromUnsignedBigInt(segmentId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Cover__coverSegmentsResultValue0Struct
    );
  }

  coverSegmentsCount(coverId: BigInt): BigInt {
    let result = super.call(
      "coverSegmentsCount",
      "coverSegmentsCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(coverId)]
    );

    return result[0].toBigInt();
  }

  try_coverSegmentsCount(coverId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "coverSegmentsCount",
      "coverSegmentsCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(coverId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createStakingPool(
    manager: Address,
    isPrivatePool: boolean,
    initialPoolFee: BigInt,
    maxPoolFee: BigInt,
    productInitializationParams: Array<
      Cover__createStakingPoolInputProductInitializationParamsStruct
    >,
    depositAmount: BigInt,
    trancheId: BigInt
  ): Address {
    let result = super.call(
      "createStakingPool",
      "createStakingPool(address,bool,uint256,uint256,(uint256,uint8,uint96,uint96)[],uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(manager),
        ethereum.Value.fromBoolean(isPrivatePool),
        ethereum.Value.fromUnsignedBigInt(initialPoolFee),
        ethereum.Value.fromUnsignedBigInt(maxPoolFee),
        ethereum.Value.fromTupleArray(productInitializationParams),
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(trancheId)
      ]
    );

    return result[0].toAddress();
  }

  try_createStakingPool(
    manager: Address,
    isPrivatePool: boolean,
    initialPoolFee: BigInt,
    maxPoolFee: BigInt,
    productInitializationParams: Array<
      Cover__createStakingPoolInputProductInitializationParamsStruct
    >,
    depositAmount: BigInt,
    trancheId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createStakingPool",
      "createStakingPool(address,bool,uint256,uint256,(uint256,uint8,uint96,uint96)[],uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(manager),
        ethereum.Value.fromBoolean(isPrivatePool),
        ethereum.Value.fromUnsignedBigInt(initialPoolFee),
        ethereum.Value.fromUnsignedBigInt(maxPoolFee),
        ethereum.Value.fromTupleArray(productInitializationParams),
        ethereum.Value.fromUnsignedBigInt(depositAmount),
        ethereum.Value.fromUnsignedBigInt(trancheId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSupportedCoverAssets(productId: BigInt): BigInt {
    let result = super.call(
      "getSupportedCoverAssets",
      "getSupportedCoverAssets(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );

    return result[0].toBigInt();
  }

  try_getSupportedCoverAssets(productId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSupportedCoverAssets",
      "getSupportedCoverAssets(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(productId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalCapacityRatio(): i32 {
    let result = super.call(
      "globalCapacityRatio",
      "globalCapacityRatio():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_globalCapacityRatio(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "globalCapacityRatio",
      "globalCapacityRatio():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  globalRewardsRatio(): i32 {
    let result = super.call(
      "globalRewardsRatio",
      "globalRewardsRatio():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_globalRewardsRatio(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "globalRewardsRatio",
      "globalRewardsRatio():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isAssetSupported(assetsBitMap: BigInt, payoutAsset: i32): boolean {
    let result = super.call(
      "isAssetSupported",
      "isAssetSupported(uint32,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsBitMap),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(payoutAsset))
      ]
    );

    return result[0].toBoolean();
  }

  try_isAssetSupported(
    assetsBitMap: BigInt,
    payoutAsset: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAssetSupported",
      "isAssetSupported(uint32,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(assetsBitMap),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(payoutAsset))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  master(): Address {
    let result = super.call("master", "master():(address)", []);

    return result[0].toAddress();
  }

  try_master(): ethereum.CallResult<Address> {
    let result = super.tryCall("master", "master():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  performStakeBurn(
    coverId: BigInt,
    segmentId: BigInt,
    burnAmount: BigInt
  ): Address {
    let result = super.call(
      "performStakeBurn",
      "performStakeBurn(uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(coverId),
        ethereum.Value.fromUnsignedBigInt(segmentId),
        ethereum.Value.fromUnsignedBigInt(burnAmount)
      ]
    );

    return result[0].toAddress();
  }

  try_performStakeBurn(
    coverId: BigInt,
    segmentId: BigInt,
    burnAmount: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "performStakeBurn",
      "performStakeBurn(uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(coverId),
        ethereum.Value.fromUnsignedBigInt(segmentId),
        ethereum.Value.fromUnsignedBigInt(burnAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  productTypes(id: BigInt): Cover__productTypesResultValue0Struct {
    let result = super.call(
      "productTypes",
      "productTypes(uint256):((uint8,uint16))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTuple() as Cover__productTypesResultValue0Struct;
  }

  try_productTypes(
    id: BigInt
  ): ethereum.CallResult<Cover__productTypesResultValue0Struct> {
    let result = super.tryCall(
      "productTypes",
      "productTypes(uint256):((uint8,uint16))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Cover__productTypesResultValue0Struct
    );
  }

  products(id: BigInt): Cover__productsResultValue0Struct {
    let result = super.call(
      "products",
      "products(uint256):((uint16,address,uint32,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTuple() as Cover__productsResultValue0Struct;
  }

  try_products(
    id: BigInt
  ): ethereum.CallResult<Cover__productsResultValue0Struct> {
    let result = super.tryCall(
      "products",
      "products(uint256):((uint16,address,uint32,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Cover__productsResultValue0Struct
    );
  }

  productsCount(): BigInt {
    let result = super.call("productsCount", "productsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_productsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "productsCount",
      "productsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingPool(index: BigInt): Address {
    let result = super.call("stakingPool", "stakingPool(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_stakingPool(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingPool",
      "stakingPool(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingPoolCount(): BigInt {
    let result = super.call(
      "stakingPoolCount",
      "stakingPoolCount():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_stakingPoolCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakingPoolCount",
      "stakingPoolCount():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingPoolImplementation(): Address {
    let result = super.call(
      "stakingPoolImplementation",
      "stakingPoolImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakingPoolImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingPoolImplementation",
      "stakingPoolImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingPoolProxyCodeHash(): Bytes {
    let result = super.call(
      "stakingPoolProxyCodeHash",
      "stakingPoolProxyCodeHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_stakingPoolProxyCodeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "stakingPoolProxyCodeHash",
      "stakingPoolProxyCodeHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  totalActiveCoverInAsset(param0: i32): BigInt {
    let result = super.call(
      "totalActiveCoverInAsset",
      "totalActiveCoverInAsset(uint24):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toBigInt();
  }

  try_totalActiveCoverInAsset(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalActiveCoverInAsset",
      "totalActiveCoverInAsset(uint24):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _quotationData(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _productsV1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _coverNFT(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stakingPoolImplementation(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get coverProxyAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddProductTypesCall extends ethereum.Call {
  get inputs(): AddProductTypesCall__Inputs {
    return new AddProductTypesCall__Inputs(this);
  }

  get outputs(): AddProductTypesCall__Outputs {
    return new AddProductTypesCall__Outputs(this);
  }
}

export class AddProductTypesCall__Inputs {
  _call: AddProductTypesCall;

  constructor(call: AddProductTypesCall) {
    this._call = call;
  }

  get newProductTypes(): Array<AddProductTypesCallNewProductTypesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddProductTypesCallNewProductTypesStruct
    >();
  }

  get ipfsMetadata(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class AddProductTypesCall__Outputs {
  _call: AddProductTypesCall;

  constructor(call: AddProductTypesCall) {
    this._call = call;
  }
}

export class AddProductTypesCallNewProductTypesStruct extends ethereum.Tuple {
  get claimMethod(): i32 {
    return this[0].toI32();
  }

  get gracePeriodInDays(): i32 {
    return this[1].toI32();
  }
}

export class AddProductsCall extends ethereum.Call {
  get inputs(): AddProductsCall__Inputs {
    return new AddProductsCall__Inputs(this);
  }

  get outputs(): AddProductsCall__Outputs {
    return new AddProductsCall__Outputs(this);
  }
}

export class AddProductsCall__Inputs {
  _call: AddProductsCall;

  constructor(call: AddProductsCall) {
    this._call = call;
  }

  get newProducts(): Array<AddProductsCallNewProductsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddProductsCallNewProductsStruct
    >();
  }

  get ipfsMetadata(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class AddProductsCall__Outputs {
  _call: AddProductsCall;

  constructor(call: AddProductsCall) {
    this._call = call;
  }
}

export class AddProductsCallNewProductsStruct extends ethereum.Tuple {
  get productType(): i32 {
    return this[0].toI32();
  }

  get productAddress(): Address {
    return this[1].toAddress();
  }

  get coverAssets(): BigInt {
    return this[2].toBigInt();
  }

  get initialPriceRatio(): i32 {
    return this[3].toI32();
  }

  get capacityReductionRatio(): i32 {
    return this[4].toI32();
  }
}

export class BuyCoverCall extends ethereum.Call {
  get inputs(): BuyCoverCall__Inputs {
    return new BuyCoverCall__Inputs(this);
  }

  get outputs(): BuyCoverCall__Outputs {
    return new BuyCoverCall__Outputs(this);
  }
}

export class BuyCoverCall__Inputs {
  _call: BuyCoverCall;

  constructor(call: BuyCoverCall) {
    this._call = call;
  }

  get params(): BuyCoverCallParamsStruct {
    return this._call.inputValues[0].value.toTuple() as BuyCoverCallParamsStruct;
  }

  get allocationRequests(): Array<BuyCoverCallAllocationRequestsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      BuyCoverCallAllocationRequestsStruct
    >();
  }
}

export class BuyCoverCall__Outputs {
  _call: BuyCoverCall;

  constructor(call: BuyCoverCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyCoverCallParamsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get productId(): i32 {
    return this[1].toI32();
  }

  get payoutAsset(): i32 {
    return this[2].toI32();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get period(): BigInt {
    return this[4].toBigInt();
  }

  get maxPremiumInAsset(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): i32 {
    return this[6].toI32();
  }

  get payWithNXM(): boolean {
    return this[7].toBoolean();
  }

  get commissionRatio(): i32 {
    return this[8].toI32();
  }

  get commissionDestination(): Address {
    return this[9].toAddress();
  }

  get ipfsData(): string {
    return this[10].toString();
  }
}

export class BuyCoverCallAllocationRequestsStruct extends ethereum.Tuple {
  get poolId(): BigInt {
    return this[0].toBigInt();
  }

  get coverAmountInAsset(): BigInt {
    return this[1].toBigInt();
  }
}

export class ChangeDependentContractAddressCall extends ethereum.Call {
  get inputs(): ChangeDependentContractAddressCall__Inputs {
    return new ChangeDependentContractAddressCall__Inputs(this);
  }

  get outputs(): ChangeDependentContractAddressCall__Outputs {
    return new ChangeDependentContractAddressCall__Outputs(this);
  }
}

export class ChangeDependentContractAddressCall__Inputs {
  _call: ChangeDependentContractAddressCall;

  constructor(call: ChangeDependentContractAddressCall) {
    this._call = call;
  }
}

export class ChangeDependentContractAddressCall__Outputs {
  _call: ChangeDependentContractAddressCall;

  constructor(call: ChangeDependentContractAddressCall) {
    this._call = call;
  }
}

export class ChangeMasterAddressCall extends ethereum.Call {
  get inputs(): ChangeMasterAddressCall__Inputs {
    return new ChangeMasterAddressCall__Inputs(this);
  }

  get outputs(): ChangeMasterAddressCall__Outputs {
    return new ChangeMasterAddressCall__Outputs(this);
  }
}

export class ChangeMasterAddressCall__Inputs {
  _call: ChangeMasterAddressCall;

  constructor(call: ChangeMasterAddressCall) {
    this._call = call;
  }

  get masterAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeMasterAddressCall__Outputs {
  _call: ChangeMasterAddressCall;

  constructor(call: ChangeMasterAddressCall) {
    this._call = call;
  }
}

export class CommitActiveCoverAmountsCall extends ethereum.Call {
  get inputs(): CommitActiveCoverAmountsCall__Inputs {
    return new CommitActiveCoverAmountsCall__Inputs(this);
  }

  get outputs(): CommitActiveCoverAmountsCall__Outputs {
    return new CommitActiveCoverAmountsCall__Outputs(this);
  }
}

export class CommitActiveCoverAmountsCall__Inputs {
  _call: CommitActiveCoverAmountsCall;

  constructor(call: CommitActiveCoverAmountsCall) {
    this._call = call;
  }
}

export class CommitActiveCoverAmountsCall__Outputs {
  _call: CommitActiveCoverAmountsCall;

  constructor(call: CommitActiveCoverAmountsCall) {
    this._call = call;
  }
}

export class CreateStakingPoolCall extends ethereum.Call {
  get inputs(): CreateStakingPoolCall__Inputs {
    return new CreateStakingPoolCall__Inputs(this);
  }

  get outputs(): CreateStakingPoolCall__Outputs {
    return new CreateStakingPoolCall__Outputs(this);
  }
}

export class CreateStakingPoolCall__Inputs {
  _call: CreateStakingPoolCall;

  constructor(call: CreateStakingPoolCall) {
    this._call = call;
  }

  get manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isPrivatePool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get initialPoolFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxPoolFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get productInitializationParams(): Array<
    CreateStakingPoolCallProductInitializationParamsStruct
  > {
    return this._call.inputValues[4].value.toTupleArray<
      CreateStakingPoolCallProductInitializationParamsStruct
    >();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get trancheId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateStakingPoolCall__Outputs {
  _call: CreateStakingPoolCall;

  constructor(call: CreateStakingPoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateStakingPoolCallProductInitializationParamsStruct extends ethereum.Tuple {
  get productId(): BigInt {
    return this[0].toBigInt();
  }

  get weight(): i32 {
    return this[1].toI32();
  }

  get initialPrice(): BigInt {
    return this[2].toBigInt();
  }

  get targetPrice(): BigInt {
    return this[3].toBigInt();
  }
}

export class EditCoverCall extends ethereum.Call {
  get inputs(): EditCoverCall__Inputs {
    return new EditCoverCall__Inputs(this);
  }

  get outputs(): EditCoverCall__Outputs {
    return new EditCoverCall__Outputs(this);
  }
}

export class EditCoverCall__Inputs {
  _call: EditCoverCall;

  constructor(call: EditCoverCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyCoverParams(): EditCoverCallBuyCoverParamsStruct {
    return this._call.inputValues[1].value.toTuple() as EditCoverCallBuyCoverParamsStruct;
  }

  get poolAllocations(): Array<EditCoverCallPoolAllocationsStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      EditCoverCallPoolAllocationsStruct
    >();
  }
}

export class EditCoverCall__Outputs {
  _call: EditCoverCall;

  constructor(call: EditCoverCall) {
    this._call = call;
  }
}

export class EditCoverCallBuyCoverParamsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get productId(): i32 {
    return this[1].toI32();
  }

  get payoutAsset(): i32 {
    return this[2].toI32();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get period(): BigInt {
    return this[4].toBigInt();
  }

  get maxPremiumInAsset(): BigInt {
    return this[5].toBigInt();
  }

  get paymentAsset(): i32 {
    return this[6].toI32();
  }

  get payWithNXM(): boolean {
    return this[7].toBoolean();
  }

  get commissionRatio(): i32 {
    return this[8].toI32();
  }

  get commissionDestination(): Address {
    return this[9].toAddress();
  }

  get ipfsData(): string {
    return this[10].toString();
  }
}

export class EditCoverCallPoolAllocationsStruct extends ethereum.Tuple {
  get poolId(): BigInt {
    return this[0].toBigInt();
  }

  get coverAmountInAsset(): BigInt {
    return this[1].toBigInt();
  }
}

export class EditProductsIpfsMetadataCall extends ethereum.Call {
  get inputs(): EditProductsIpfsMetadataCall__Inputs {
    return new EditProductsIpfsMetadataCall__Inputs(this);
  }

  get outputs(): EditProductsIpfsMetadataCall__Outputs {
    return new EditProductsIpfsMetadataCall__Outputs(this);
  }
}

export class EditProductsIpfsMetadataCall__Inputs {
  _call: EditProductsIpfsMetadataCall;

  constructor(call: EditProductsIpfsMetadataCall) {
    this._call = call;
  }

  get productIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get ipfsMetadata(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class EditProductsIpfsMetadataCall__Outputs {
  _call: EditProductsIpfsMetadataCall;

  constructor(call: EditProductsIpfsMetadataCall) {
    this._call = call;
  }
}

export class EnableActiveCoverAmountTrackingCall extends ethereum.Call {
  get inputs(): EnableActiveCoverAmountTrackingCall__Inputs {
    return new EnableActiveCoverAmountTrackingCall__Inputs(this);
  }

  get outputs(): EnableActiveCoverAmountTrackingCall__Outputs {
    return new EnableActiveCoverAmountTrackingCall__Outputs(this);
  }
}

export class EnableActiveCoverAmountTrackingCall__Inputs {
  _call: EnableActiveCoverAmountTrackingCall;

  constructor(call: EnableActiveCoverAmountTrackingCall) {
    this._call = call;
  }

  get assetIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get activeCoverAmountsForAssets(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class EnableActiveCoverAmountTrackingCall__Outputs {
  _call: EnableActiveCoverAmountTrackingCall;

  constructor(call: EnableActiveCoverAmountTrackingCall) {
    this._call = call;
  }
}

export class ExpireCoverCall extends ethereum.Call {
  get inputs(): ExpireCoverCall__Inputs {
    return new ExpireCoverCall__Inputs(this);
  }

  get outputs(): ExpireCoverCall__Outputs {
    return new ExpireCoverCall__Outputs(this);
  }
}

export class ExpireCoverCall__Inputs {
  _call: ExpireCoverCall;

  constructor(call: ExpireCoverCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExpireCoverCall__Outputs {
  _call: ExpireCoverCall;

  constructor(call: ExpireCoverCall) {
    this._call = call;
  }
}

export class ExpireCoversCall extends ethereum.Call {
  get inputs(): ExpireCoversCall__Inputs {
    return new ExpireCoversCall__Inputs(this);
  }

  get outputs(): ExpireCoversCall__Outputs {
    return new ExpireCoversCall__Outputs(this);
  }
}

export class ExpireCoversCall__Inputs {
  _call: ExpireCoversCall;

  constructor(call: ExpireCoversCall) {
    this._call = call;
  }

  get coverIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ExpireCoversCall__Outputs {
  _call: ExpireCoversCall;

  constructor(call: ExpireCoversCall) {
    this._call = call;
  }
}

export class MigrateCoverFromOwnerCall extends ethereum.Call {
  get inputs(): MigrateCoverFromOwnerCall__Inputs {
    return new MigrateCoverFromOwnerCall__Inputs(this);
  }

  get outputs(): MigrateCoverFromOwnerCall__Outputs {
    return new MigrateCoverFromOwnerCall__Outputs(this);
  }
}

export class MigrateCoverFromOwnerCall__Inputs {
  _call: MigrateCoverFromOwnerCall;

  constructor(call: MigrateCoverFromOwnerCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fromOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get toNewOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MigrateCoverFromOwnerCall__Outputs {
  _call: MigrateCoverFromOwnerCall;

  constructor(call: MigrateCoverFromOwnerCall) {
    this._call = call;
  }
}

export class MigrateCoversCall extends ethereum.Call {
  get inputs(): MigrateCoversCall__Inputs {
    return new MigrateCoversCall__Inputs(this);
  }

  get outputs(): MigrateCoversCall__Outputs {
    return new MigrateCoversCall__Outputs(this);
  }
}

export class MigrateCoversCall__Inputs {
  _call: MigrateCoversCall;

  constructor(call: MigrateCoversCall) {
    this._call = call;
  }

  get coverIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get toNewOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MigrateCoversCall__Outputs {
  _call: MigrateCoversCall;

  constructor(call: MigrateCoversCall) {
    this._call = call;
  }
}

export class PerformStakeBurnCall extends ethereum.Call {
  get inputs(): PerformStakeBurnCall__Inputs {
    return new PerformStakeBurnCall__Inputs(this);
  }

  get outputs(): PerformStakeBurnCall__Outputs {
    return new PerformStakeBurnCall__Outputs(this);
  }
}

export class PerformStakeBurnCall__Inputs {
  _call: PerformStakeBurnCall;

  constructor(call: PerformStakeBurnCall) {
    this._call = call;
  }

  get coverId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get segmentId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get burnAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PerformStakeBurnCall__Outputs {
  _call: PerformStakeBurnCall;

  constructor(call: PerformStakeBurnCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetCapacityReductionRatioCall extends ethereum.Call {
  get inputs(): SetCapacityReductionRatioCall__Inputs {
    return new SetCapacityReductionRatioCall__Inputs(this);
  }

  get outputs(): SetCapacityReductionRatioCall__Outputs {
    return new SetCapacityReductionRatioCall__Outputs(this);
  }
}

export class SetCapacityReductionRatioCall__Inputs {
  _call: SetCapacityReductionRatioCall;

  constructor(call: SetCapacityReductionRatioCall) {
    this._call = call;
  }

  get productId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reduction(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetCapacityReductionRatioCall__Outputs {
  _call: SetCapacityReductionRatioCall;

  constructor(call: SetCapacityReductionRatioCall) {
    this._call = call;
  }
}

export class SetInitialPricesCall extends ethereum.Call {
  get inputs(): SetInitialPricesCall__Inputs {
    return new SetInitialPricesCall__Inputs(this);
  }

  get outputs(): SetInitialPricesCall__Outputs {
    return new SetInitialPricesCall__Outputs(this);
  }
}

export class SetInitialPricesCall__Inputs {
  _call: SetInitialPricesCall;

  constructor(call: SetInitialPricesCall) {
    this._call = call;
  }

  get productIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get initialPriceRatios(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }
}

export class SetInitialPricesCall__Outputs {
  _call: SetInitialPricesCall;

  constructor(call: SetInitialPricesCall) {
    this._call = call;
  }
}

export class TransferCoversCall extends ethereum.Call {
  get inputs(): TransferCoversCall__Inputs {
    return new TransferCoversCall__Inputs(this);
  }

  get outputs(): TransferCoversCall__Outputs {
    return new TransferCoversCall__Outputs(this);
  }
}

export class TransferCoversCall__Inputs {
  _call: TransferCoversCall;

  constructor(call: TransferCoversCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get coverIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferCoversCall__Outputs {
  _call: TransferCoversCall;

  constructor(call: TransferCoversCall) {
    this._call = call;
  }
}

export class UpdateUintParametersCall extends ethereum.Call {
  get inputs(): UpdateUintParametersCall__Inputs {
    return new UpdateUintParametersCall__Inputs(this);
  }

  get outputs(): UpdateUintParametersCall__Outputs {
    return new UpdateUintParametersCall__Outputs(this);
  }
}

export class UpdateUintParametersCall__Inputs {
  _call: UpdateUintParametersCall;

  constructor(call: UpdateUintParametersCall) {
    this._call = call;
  }

  get paramNames(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateUintParametersCall__Outputs {
  _call: UpdateUintParametersCall;

  constructor(call: UpdateUintParametersCall) {
    this._call = call;
  }
}
